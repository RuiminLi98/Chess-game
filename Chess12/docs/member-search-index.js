memberSearchIndex = [{"p":"chess","c":"Chess","l":"a"},{"p":"structure","c":"Bishop","l":"Bishop(String, String, boolean, int, int)","url":"%3Cinit%3E(java.lang.String,java.lang.String,boolean,int,int)"},{"p":"chess","c":"Chess","l":"board"},{"p":"chess","c":"Chess","l":"CastlingBL"},{"p":"chess","c":"Chess","l":"CastlingBLPrev"},{"p":"chess","c":"Chess","l":"CastlingBS"},{"p":"chess","c":"Chess","l":"CastlingBSPrev"},{"p":"chess","c":"Chess","l":"CastlingWL"},{"p":"chess","c":"Chess","l":"CastlingWLPrev"},{"p":"chess","c":"Chess","l":"CastlingWS"},{"p":"chess","c":"Chess","l":"CastlingWSPrev"},{"p":"structure","c":"Cell","l":"Cell(String, String, boolean, int, int)","url":"%3Cinit%3E(java.lang.String,java.lang.String,boolean,int,int)"},{"p":"structure","c":"Cell","l":"cellName"},{"p":"structure","c":"Point","l":"check(Point, Point)","url":"check(structure.Point,structure.Point)"},{"p":"structure","c":"Point","l":"checkFromSelf(Point, Point)","url":"checkFromSelf(structure.Point,structure.Point)"},{"p":"chess","c":"Chess","l":"checkToDeath(char)"},{"p":"structure","c":"Pawn","l":"CheckTransPawnForB(int, int, int)","url":"CheckTransPawnForB(int,int,int)"},{"p":"structure","c":"PawnPromotion","l":"CheckTransPawnForB(int, int, int)","url":"CheckTransPawnForB(int,int,int)"},{"p":"structure","c":"Pawn","l":"CheckTransPawnForW(int, int, int)","url":"CheckTransPawnForW(int,int,int)"},{"p":"structure","c":"PawnPromotion","l":"CheckTransPawnForW(int, int, int)","url":"CheckTransPawnForW(int,int,int)"},{"p":"chess","c":"Chess","l":"Chess()","url":"%3Cinit%3E()"},{"p":"structure","c":"Bishop","l":"contains(ArrayList<Integer[]>, Integer[])","url":"contains(java.util.ArrayList,java.lang.Integer[])"},{"p":"structure","c":"Queen","l":"contains(ArrayList<Integer[]>, Integer[])","url":"contains(java.util.ArrayList,java.lang.Integer[])"},{"p":"structure","c":"Rook","l":"contains(ArrayList<Integer[]>, Integer[])","url":"contains(java.util.ArrayList,java.lang.Integer[])"},{"p":"chess","c":"Chess","l":"copyCell(Cell)","url":"copyCell(structure.Cell)"},{"p":"structure","c":"Bishop","l":"detector(int, int)","url":"detector(int,int)"},{"p":"structure","c":"Queen","l":"detector(int, int)","url":"detector(int,int)"},{"p":"structure","c":"Rook","l":"detector(int, int)","url":"detector(int,int)"},{"p":"chess","c":"Chess","l":"draw_flag"},{"p":"structure","c":"Empty","l":"Empty(String, String, boolean, int, int)","url":"%3Cinit%3E(java.lang.String,java.lang.String,boolean,int,int)"},{"p":"chess","c":"Chess","l":"enpassant_flag"},{"p":"chess","c":"Chess","l":"enpassant_flagx"},{"p":"chess","c":"Chess","l":"enpassant_flagy"},{"p":"structure","c":"Pawn","l":"Enpassant(String, int, int, int, int)","url":"Enpassant(java.lang.String,int,int,int,int)"},{"p":"structure","c":"Point","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"structure","c":"Point","l":"findCheck(Point)","url":"findCheck(structure.Point)"},{"p":"chess","c":"Chess","l":"findPath(Point, Point)","url":"findPath(structure.Point,structure.Point)"},{"p":"chess","c":"Chess","l":"getCell(Point)","url":"getCell(structure.Point)"},{"p":"structure","c":"Point","l":"getLocation(String)","url":"getLocation(java.lang.String)"},{"p":"structure","c":"King","l":"haveObs(int, int, int)","url":"haveObs(int,int,int)"},{"p":"chess","c":"Chess","l":"Illegalmove(char, int, int, int, int)","url":"Illegalmove(char,int,int,int,int)"},{"p":"chess","c":"Chess","l":"Initialize()"},{"p":"chess","c":"Chess","l":"InitializeCastling()"},{"p":"chess","c":"Chess","l":"InitializeCheckmate()"},{"p":"chess","c":"Chess","l":"InitializeCheckmate2()"},{"p":"chess","c":"Chess","l":"InitializeStalemate()"},{"p":"chess","c":"Chess","l":"InitializeStalemate2()"},{"p":"chess","c":"Chess","l":"InitializeStalemate3()"},{"p":"structure","c":"Point","l":"inScale(int, int)","url":"inScale(int,int)"},{"p":"structure","c":"Cell","l":"isAlive"},{"p":"chess","c":"Chess","l":"isCheckmate()"},{"p":"structure","c":"Point","l":"isEnemy(Cell, Cell)","url":"isEnemy(structure.Cell,structure.Cell)"},{"p":"structure","c":"Point","l":"isEnemy(Point, Point)","url":"isEnemy(structure.Point,structure.Point)"},{"p":"chess","c":"Chess","l":"isStalemate(Point)","url":"isStalemate(structure.Point)"},{"p":"structure","c":"Knight","l":"JudgePos(int, int, int, int)","url":"JudgePos(int,int,int,int)"},{"p":"structure","c":"Cell","l":"jump(int, int, int, int)","url":"jump(int,int,int,int)"},{"p":"structure","c":"King","l":"King(String, String, boolean, int, int)","url":"%3Cinit%3E(java.lang.String,java.lang.String,boolean,int,int)"},{"p":"structure","c":"Knight","l":"Knight(String, String, boolean, int, int)","url":"%3Cinit%3E(java.lang.String,java.lang.String,boolean,int,int)"},{"p":"chess","c":"Chess","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"structure","c":"Bishop","l":"move(int, int, int, int)","url":"move(int,int,int,int)"},{"p":"structure","c":"Cell","l":"move(int, int, int, int)","url":"move(int,int,int,int)"},{"p":"structure","c":"Empty","l":"move(int, int, int, int)","url":"move(int,int,int,int)"},{"p":"structure","c":"King","l":"move(int, int, int, int)","url":"move(int,int,int,int)"},{"p":"structure","c":"Knight","l":"move(int, int, int, int)","url":"move(int,int,int,int)"},{"p":"structure","c":"Pawn","l":"move(int, int, int, int)","url":"move(int,int,int,int)"},{"p":"structure","c":"Queen","l":"move(int, int, int, int)","url":"move(int,int,int,int)"},{"p":"structure","c":"Rook","l":"move(int, int, int, int)","url":"move(int,int,int,int)"},{"p":"structure","c":"Knight","l":"Ownside(String, String)","url":"Ownside(java.lang.String,java.lang.String)"},{"p":"structure","c":"Pawn","l":"Ownside(String, String)","url":"Ownside(java.lang.String,java.lang.String)"},{"p":"chess","c":"Chess","l":"parseLocation(char)"},{"p":"structure","c":"Pawn","l":"Pawn(String, String, boolean, int, int)","url":"%3Cinit%3E(java.lang.String,java.lang.String,boolean,int,int)"},{"p":"structure","c":"Cell","l":"pieceName"},{"p":"structure","c":"Point","l":"Point(int, int)","url":"%3Cinit%3E(int,int)"},{"p":"structure","c":"Point","l":"PointThreatFromPN(Point)","url":"PointThreatFromPN(structure.Point)"},{"p":"structure","c":"Point","l":"PointTreatFromKN(Point)","url":"PointTreatFromKN(structure.Point)"},{"p":"chess","c":"Chess","l":"previousCell"},{"p":"chess","c":"Chess","l":"printBoard()"},{"p":"structure","c":"Queen","l":"Queen(String, String, boolean, int, int)","url":"%3Cinit%3E(java.lang.String,java.lang.String,boolean,int,int)"},{"p":"structure","c":"Rook","l":"Rook(String, String, boolean, int, int)","url":"%3Cinit%3E(java.lang.String,java.lang.String,boolean,int,int)"},{"p":"structure","c":"Bishop","l":"Searcher()"},{"p":"structure","c":"Cell","l":"Searcher()"},{"p":"structure","c":"Empty","l":"Searcher()"},{"p":"structure","c":"King","l":"Searcher()"},{"p":"structure","c":"Knight","l":"Searcher()"},{"p":"structure","c":"Pawn","l":"Searcher()"},{"p":"structure","c":"Queen","l":"Searcher()"},{"p":"structure","c":"Rook","l":"Searcher()"},{"p":"structure","c":"Point","l":"threatFromPorN(Point, Point)","url":"threatFromPorN(structure.Point,structure.Point)"},{"p":"structure","c":"Point","l":"threatFromPorNSelf(Point, Point)","url":"threatFromPorNSelf(structure.Point,structure.Point)"},{"p":"structure","c":"Pawn","l":"TransPawnForB(String, String, int, int)","url":"TransPawnForB(java.lang.String,java.lang.String,int,int)"},{"p":"structure","c":"PawnPromotion","l":"TransPawnForB(String, String, int, int)","url":"TransPawnForB(java.lang.String,java.lang.String,int,int)"},{"p":"structure","c":"Pawn","l":"TransPawnForW(String, String, int, int)","url":"TransPawnForW(java.lang.String,java.lang.String,int,int)"},{"p":"structure","c":"PawnPromotion","l":"TransPawnForW(String, String, int, int)","url":"TransPawnForW(java.lang.String,java.lang.String,int,int)"},{"p":"structure","c":"Cell","l":"x"},{"p":"structure","c":"Point","l":"x"},{"p":"structure","c":"Cell","l":"y"},{"p":"structure","c":"Point","l":"y"}]